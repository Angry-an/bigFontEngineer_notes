### 传统的diff
  通过循环递归遍历来进行比较，效率低，复杂度高O^3，显然这是无法满足性能要求的。

### diff策略 
  1. 在真实的操作中，跨层操作dom特别少，可以忽略不计
  2. 相同类的组件生成树的结构类似，不同类的组件生成树的结构不同
  3. 对于同一层级的的子节点，他们可以通过唯一id进行区分

#### 根据以上三个策略，react对tree diff， component diff，element diff进行优化

  ###  tree diff
    1. React 通过 updateDepth 对 Virtual DOM 树进行层级控制。只会对同一个父节点下的所有子节点进行比较。当发现该节点不存在，则删除改节点和其节点，不会再进一步比较
    2. 对于react只考虑同一层级子节点的位置变化，对于不同层级的，只有创建和删除操作
  ### component diff
    1. 同一类型的组件，按照策略比较tree diff
    2. 不同类型的组件，直接替换组件下的所有子节点
    3. 对于同一类型组件，有可能虚拟dom没有任何变化，如果能知道这一点就大量节省diff时间。这就是为什么在shouldcompoentupdate生命周期里进行优化的原因
   
   ### element diff
    1. 节点处于同一层级，diff只提供三种操作：插入，移动，删除
    2.  key 发现新老集合中的节点都是相同的节点，因此无需进行节点删除和创建，只需要将老集合中节点的位置进行移动，更新为新集合中节点的位置
